def main():
    # Μεταβλητές που ορίζουν το εύρος αποδεκτών τιμών
    start = 2
    end = 10000

    # Ανάθεση τιμής σε μεταβλητή με τη χρήση συνάρτησης.
    n = get_integer_from_user(start, end, f"Δώστε το n ({start} - {end}): ")

    """
    Ανάλυση του αριθμού n σε γινόμενο πρώτων παραγόντων μέσω συνάρτησης, και αποθήκευση
    του αποτελέσματος σε μεταβλητή, για μελλοντική χρήση.
    """
    list_of_primes = analyze_to_primes(n)

    # Εκτύπωση του αποτελέσματος μέσω συνάρτησης, η οποία θα αναλάβει πρώτα την μορφοποίηση του
    print(format_prime_factors(n, list_of_primes))

"""
Η συνάρτηση λαμβάνει ως όρισμα όχι μόνο την αρχική και τελική αποδεκτή τιμή ως ορίσματα,
αλλά και το μήνυμα που θα εκτυπώσει στον χρήστη, για να του ζητήσει να εισάγει τιμή. Αυτό
την κάνει πιο ευέλικτη, σε περίπτωση που το πρόγραμμα επεκταθεί, και χρειαστεί να λάβει
κάποιον ακέραιο, εντός ενός εύρους, σε παραπάνω από ένα σημεία.
"""
def get_integer_from_user(start, end, message):

    """
    Το while loop θα "τρέχει", έως ότου οι επαναλήψεις σταματήσουν, με την χρήση κάποιου
    control flow statement.
    """
    while True:
        """
        Λαμβάνω το input από τον χρήστη και το μετατρέπω σε int απευθείας, καθώς έχω βεβαιωθεί
        από την εκφώνηση πως δεν υπάρχει περίπτωση να λάβω στοιχείο εκτός ακεραίου
        """
        result = int(input(message))

        # Αν ο ακέραιος που θα λάβω έχει αποδεκτή τιμή, βγαίνω από την while
        if start <= result <= end:
            break

    # Επιστρέφω την τιμή που έλαβα από τον χρήστη
    return result


def analyze_to_primes(num):
    # Αρχικοποίηση του διαιρέτη στο 2 (τον μικρότερο πρώτο αριθμό)
    i = 2

    # Λίστα για αποθήκευση των πρώτων παραγόντων
    factors = []

    """
    Το while loop εκτελείται όσο το i * i είναι μικρότερο ή ίσο του num, δηλαδή
    ελέγχουμε για πιθανούς πρώτους παράγοντες μέχρι την τετραγωνική ρίζα του num.
    """
    while i * i <= num:
        """
        Αν το υπόλοιπο της διαίρεσης του num με το i δεν είναι μηδέν,
        δηλαδή το i δεν είναι παράγοντας του num
        """
        if num % i:
            # Αυξάνουμε το i αν δεν είναι παράγοντας του num
            i += 1
        else:
            # Διαιρούμε το num με το i με ακέραια διαίρεση (ευκλείδεια διαίρεση)
            num //= i
            # Προσθέτουμε το i στη λίστα των παραγόντων
            factors.append(i)
    if num > 1:
        # Προσθέτουμε τον τελευταίο πρώτο παράγοντα αν είναι μεγαλύτερος του 1
        factors.append(num)
    # Επιστρέφουμε τη λίστα των πρώτων παραγόντων
    return factors



def format_prime_factors(number, factors):
    """
    Δημιουργία συμβολοσειράς με τους πρώτους παράγοντες χωρισμένους με ' x '.
    Για την δημιουργία αυτή χρησιμοποιείται generation expression, η οποία
    παράγει μια ακολουθία από συμβολοσειρές, μετατρέποντας κάθε στοιχείο
    της λίστας `factors` σε συμβολοσειρά.
    """
    formatted_factors = ' x '.join(str(factor) for factor in factors)

    """
    Επιστρέφει συμβολοσειρά, η οποία αποτελείται από τον αριθμό που έδωσε 
    ο χρήστης, ακολουθούμενο από ' = ', και μετά την συμβολοσειρά των 
    πρώτων, που δημιουργήθηκε παραπάνω.
    """
    return f"{number} = {formatted_factors}"


main()